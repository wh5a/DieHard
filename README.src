----------------------------
Build and usage instructions
----------------------------

--- Windows: ---

To build the Windows version (randomized runtime only), do this:

	nmake /f Makefile.win32

To use DieHard as a library with your application, link your program
as follows:

	cl /MD yourapp.cpp usewinhard.obj winhard.lib

Copy "winhard.dll" to the same directory as the executable.


--- Linux / Solaris: ---

Build the shared library with "make". You can either link in the
resulting shared object (libdiehard.so), or use DieHard by
setting the LD_PRELOAD> environment variable, as in:

	setenv LD_PRELOAD /path/to/diehard/libdiehard.so

To use the replicated version, invoke your program with (for example):

	diehard 3 /path/to/libdiehard_r.so yourapp

This would create 3 replicas of yourapp. If the application does not
read from standard input, add "< /dev/null" to the command line.


----------------------------
Notes about the source code:
----------------------------

This directory contains the source code for DieHard. The version here
uses an adaptive algorithm that differs substantially from that
described in the PLDI 2006 paper (../docs/pldi2006-diehard.pdf). In
particular, this version adjusts its heap size dynamically rather than
relying on a static, a priori heap choice.

The original version, as described in the PLDI 2006 paper, is in the
subdirectory static/. In addition, the support for replication is in
the subdirectory replicated/.

The fault injectors described in the PLDI paper are in the util/
directory. The library libbrokenmalloc.so can be used to inject buffer
overflows and dangling pointer errors. To inject buffer overflows,
just set LD_PRELOAD to point to libbrokenmalloc.so, and set the
appropriate environment variables (shown at startup). To inject
dangling pointer errors, you must first run the program with
libtrackalloc.so preloaded, and then run it on the same inputs with
libbrokenmalloc.so.
